import 'dart:io';
import 'package:dio/dio.dart';
import 'package:ozapay/core/extension.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:form_builder_validators/form_builder_validators.dart';
import 'package:ozapay/core/constants.dart';
import 'package:ozapay/core/http_request/multiple_result.dart';
import 'package:ozapay/presentation/widgets/widget.dart';
import 'package:ozapay/data/params/auth/register/register_params.dart';
import 'package:ozapay/domain/repositories/auth_repository.dart';

class PhoneInfo extends StatefulWidget {
  final String? label;
  final int? userId;
  final RegisterParams? params;
  final AuthRepository authRepository; // AuthRepository pour appeler resendCode

  const PhoneInfo({
    Key? key,
    this.label,
    this.userId,
    this.params,
    this.authRepository,
  }) : super(key: key);

  @override
  _PhoneInfoState createState() => _PhoneInfoState();
}

class _PhoneInfoState extends State<PhoneInfo> {
  bool _isResending = false;

Future<void> _resendCode() async {
  setState(() {
    _isResending = true;
  });

  // Assurez-vous que widget.params n'est pas nul
  if (widget.params == null) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Parameters are missing.")),
    );
    setState(() {
      _isResending = false;
    });
    return;
  }

  try {
    // Log des paramètres pour le débogage
    "[CODE] input: ${widget.params?.toJson()}".log();
    
    final result = await widget.authRepository?.resendCode(widget.userId!, widget.params!);

    // Log du résultat pour le débogage
    "$result".log();

    // Vérifiez si le résultat est valide
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Code resent successfully!")),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Une erreur est survenue.")),
      );
    }
  } on DioException catch (e) {
    // Gérer l'exception en utilisant Failure
    final failure = Failure.fromRequest(e.response);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Une erreur est survenue.")),
    );
  } finally {
    setState(() {
      _isResending = false;
    });
  }
}

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(
          widget.label ?? "fields.phone",
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
        ).tr(),
        const SizedBox(height: kSpacing),
        FormBuilderPhone(
          name: "phone",
          decoration: InputDecoration(
            hintText: "fields.phoneHint".tr(),
          ),
          validator: FormBuilderValidators.required(),
        ),
        const SizedBox(height: kSpacing),
        ElevatedButton(
          onPressed: _isResending ? null : _resendCode,
          child: _isResending
              ? CircularProgressIndicator()
              : Text("Resend").tr(),
        ),
      ],
    );
  }
}